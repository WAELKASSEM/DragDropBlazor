@inject DragDropService DD
@typeparam TItem 
<div class="drop-list"
     ondragover="event.preventDefault()"
     @attributes="Options"
     @ondrop="async()=>await Drop(DropOnList)"
     @ondrop:stopPropagation="true">

    @if (Items.Count == 0)
    {
        @EmptyView
    }
    @for (int i = 0; i < Items.Count; i++)
    {
        var index = i;
        var item = Items[i];
        <div ondragover="event.preventDefault()"
             @ondrop="async ()=>await Drop(DropOnItem,index,Swap)"
             @ondrop:stopPropagation="true"
             @ondragstart="()=> DragItem(item)"
             @ondragstart:stopPropagation="true"
             draggable="@AllowsDrag.ToString().ToLower()"
             class="@ItemTemplateClass">
            @ItemTemplate(item)
        </div>
    }
</div>
@code{
    #region Parameters

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Options { get; set; }
    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }
    [Parameter]
    public string ItemTemplateClass { get; set; } = "";
    [Parameter]
    public IList<TItem> Items { get; set; } = new List<TItem>();
    [Parameter]
    public EventCallback<TItem> OnItemAdded { get; set; }
    [Parameter]
    public EventCallback<TItem> OnCapacityReachedRejected { get; set; }
    [Parameter]
    public EventCallback<Tuple<int,int>> OnItemSwap { get; set; }
    [Parameter]
    public DefaultDrop DefaultDropMode { get; set; } = DefaultDrop.End;
    [Parameter]
    public RenderFragment EmptyView { get; set; }


    [Parameter]
    public int Capacity { get; set; } = int.MaxValue;

    [Parameter]
    public bool AllowsDrag { get; set; } = true;
    [Parameter]
    public Func<TItem, TItem> Copy { get; set; }
    [Parameter]
    public Func<TItem, bool> Verify { get; set; }
    [Parameter]
    public EventCallback<TItem> OnRejected { get; set; }


    #endregion

    void DropOnList(TItem data, int index = 0)
    {
        if (DefaultDropMode == DefaultDrop.Start) Items.Insert(index, data);
        if (DefaultDropMode == DefaultDrop.End) Items.Add(data);
    }
    void DropOnItem(TItem data, int index)
    {
        Items.Insert(index, data);
    }
    async Task Drop(Action<TItem, int> DropLogic, int index = 0, Action<int, int> Swap = null)
    {
        var transfer_settings = ((IDraggable)DD).GetSettings();
        if (!transfer_settings.Me) return;

        TItem data;
        try
        {
            data = (TItem)transfer_settings.Data;
        }
        catch (Exception)
        {
            DD.Clear();
            return;
        }
        var item_list_index = ItemInList(data);
        if (item_list_index != -1)
        {
            if (Swap != null){ Swap(item_list_index, index);
                await OnItemSwap.InvokeAsync(new Tuple<int, int>(item_list_index, index));
            }
            DD.Clear();
            return;
        }
        if (Verify != null && !Verify.Invoke(data))
        {
            await OnRejected.InvokeAsync(data);
            DD.Clear();
            return;
        }
        var has_place = await HasPlace(data);
        if (!has_place)
        {
            DD.Clear();
            return;
        }
        DropLogic(data, index);
        try
        {
            if (!transfer_settings.HasCopy)
            {
                ((List<TItem>)transfer_settings.DataSource).Remove(data);
                transfer_settings.StateHasChanged.Invoke();
            }
        }
        catch (Exception)
        {
        }
        await OnItemAdded.InvokeAsync(data);
        DD.Clear();

    }
    void DragItem(TItem item)
    {
        var transfer_settings = new DataTransferSettings()
        {
            Me = true,
            HasCopy = (Copy != null),
            DataSource = this.Items,
            StateHasChanged = this.StateHasChanged,
            Data = (Copy != null) ? Copy(item) : item
        };
        ((IDraggable)DD).StartDrag(transfer_settings);
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    private async Task<bool> HasPlace(TItem data)
    {
        if (Items.Count + 1 <= Capacity) return true;
        await OnCapacityReachedRejected.InvokeAsync(data);
        return false;
    }
    int ItemInList(TItem data)
    {
        int index = 0;
        foreach (var item in Items)
        {
            if (object.ReferenceEquals(data, item)) return index;
            index++;
        }
        return -1;

    }
    void Swap(int from, int to)
    {
        var backup = Items[to];
        Items[to] = Items[from];
        Items[from] = backup;

    }
}